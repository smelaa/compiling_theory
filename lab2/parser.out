Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_ins program
Rule 2     program -> program_ins
Rule 3     program_ins -> PRINT value ;
Rule 4     program_ins -> assign ;
Rule 5     program_ins -> cond_instruction
Rule 6     program_ins -> while_instruction
Rule 7     program_ins -> for_instruction
Rule 8     program_ins -> { program }
Rule 9     program_ins -> BREAK ;
Rule 10    program_ins -> CONTINUE ;
Rule 11    program_ins -> RETURN operation ;
Rule 12    program_ins -> COMMENT
Rule 13    value -> operation , value
Rule 14    value -> operation
Rule 15    assign -> id assign_operator operation
Rule 16    assign -> id [ index ] assign_operator operation
Rule 17    string -> STRING
Rule 18    assign_operator -> ADDASSIGN
Rule 19    assign_operator -> SUBASSIGN
Rule 20    assign_operator -> MULASSIGN
Rule 21    assign_operator -> DIVASSIGN
Rule 22    assign_operator -> =
Rule 23    index -> INTNUM , index
Rule 24    index -> INTNUM
Rule 25    vector -> [ vector_val ]
Rule 26    vector_val -> operation , vector_val
Rule 27    vector_val -> operation
Rule 28    operation -> operation add_operator operation
Rule 29    operation -> operation mul_operator operation
Rule 30    operation -> - operation
Rule 31    operation -> operation '
Rule 32    operation -> ( operation )
Rule 33    operation -> id
Rule 34    operation -> INTNUM
Rule 35    operation -> FLOATNUM
Rule 36    operation -> fid ( operation )
Rule 37    operation -> vector
Rule 38    operation -> string
Rule 39    mul_operator -> *
Rule 40    mul_operator -> /
Rule 41    mul_operator -> DOTMUL
Rule 42    mul_operator -> DOTDIV
Rule 43    add_operator -> +
Rule 44    add_operator -> -
Rule 45    add_operator -> DOTADD
Rule 46    add_operator -> DOTSUB
Rule 47    id -> ID
Rule 48    fid -> ZEROS
Rule 49    fid -> ONES
Rule 50    fid -> EYE
Rule 51    cond_instruction -> IF ( condition ) program_ins
Rule 52    cond_instruction -> IF ( condition ) program_ins ELSE program_ins
Rule 53    condition -> operation comparison_operator operation
Rule 54    comparison_operator -> EQ
Rule 55    comparison_operator -> NEQ
Rule 56    comparison_operator -> LT
Rule 57    comparison_operator -> GT
Rule 58    comparison_operator -> <
Rule 59    comparison_operator -> >
Rule 60    while_instruction -> WHILE ( condition ) program_ins
Rule 61    for_instruction -> FOR id = range program_ins
Rule 62    range -> operation : operation

Terminals, with rules where they appear

'                    : 31
(                    : 32 36 51 52 60
)                    : 32 36 51 52 60
*                    : 39
+                    : 43
,                    : 13 23 26
-                    : 30 44
/                    : 40
:                    : 62
;                    : 3 4 9 10 11
<                    : 58
=                    : 22 61
>                    : 59
ADDASSIGN            : 18
BREAK                : 9
COMMENT              : 12
CONTINUE             : 10
DIVASSIGN            : 21
DOTADD               : 45
DOTDIV               : 42
DOTMUL               : 41
DOTSUB               : 46
ELSE                 : 52
EQ                   : 54
EYE                  : 50
FLOATNUM             : 35
FOR                  : 61
GT                   : 57
ID                   : 47
IF                   : 51 52
INTNUM               : 23 24 34
LT                   : 56
MULASSIGN            : 20
NEQ                  : 55
ONES                 : 49
PRINT                : 3
RETURN               : 11
STRING               : 17
SUBASSIGN            : 19
WHILE                : 60
ZEROS                : 48
[                    : 16 25
]                    : 16 25
error                : 
{                    : 8
}                    : 8

Nonterminals, with rules where they appear

add_operator         : 28
assign               : 4
assign_operator      : 15 16
comparison_operator  : 53
cond_instruction     : 5
condition            : 51 52 60
fid                  : 36
for_instruction      : 7
id                   : 15 16 33 61
index                : 16 23
mul_operator         : 29
operation            : 11 13 14 15 16 26 27 28 28 29 29 30 31 32 36 53 53 62 62
program              : 1 8 0
program_ins          : 1 2 51 52 52 60 61
range                : 61
string               : 38
value                : 3 13
vector               : 37
vector_val           : 25 26
while_instruction    : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_ins program
    (2) program -> . program_ins
    (3) program_ins -> . PRINT value ;
    (4) program_ins -> . assign ;
    (5) program_ins -> . cond_instruction
    (6) program_ins -> . while_instruction
    (7) program_ins -> . for_instruction
    (8) program_ins -> . { program }
    (9) program_ins -> . BREAK ;
    (10) program_ins -> . CONTINUE ;
    (11) program_ins -> . RETURN operation ;
    (12) program_ins -> . COMMENT
    (15) assign -> . id assign_operator operation
    (16) assign -> . id [ index ] assign_operator operation
    (51) cond_instruction -> . IF ( condition ) program_ins
    (52) cond_instruction -> . IF ( condition ) program_ins ELSE program_ins
    (60) while_instruction -> . WHILE ( condition ) program_ins
    (61) for_instruction -> . FOR id = range program_ins
    (47) id -> . ID

    PRINT           shift and go to state 3
    {               shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    COMMENT         shift and go to state 12
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 17

    program                        shift and go to state 1
    program_ins                    shift and go to state 2
    assign                         shift and go to state 4
    cond_instruction               shift and go to state 5
    while_instruction              shift and go to state 6
    for_instruction                shift and go to state 7
    id                             shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> program_ins . program
    (2) program -> program_ins .
    (1) program -> . program_ins program
    (2) program -> . program_ins
    (3) program_ins -> . PRINT value ;
    (4) program_ins -> . assign ;
    (5) program_ins -> . cond_instruction
    (6) program_ins -> . while_instruction
    (7) program_ins -> . for_instruction
    (8) program_ins -> . { program }
    (9) program_ins -> . BREAK ;
    (10) program_ins -> . CONTINUE ;
    (11) program_ins -> . RETURN operation ;
    (12) program_ins -> . COMMENT
    (15) assign -> . id assign_operator operation
    (16) assign -> . id [ index ] assign_operator operation
    (51) cond_instruction -> . IF ( condition ) program_ins
    (52) cond_instruction -> . IF ( condition ) program_ins ELSE program_ins
    (60) while_instruction -> . WHILE ( condition ) program_ins
    (61) for_instruction -> . FOR id = range program_ins
    (47) id -> . ID

    $end            reduce using rule 2 (program -> program_ins .)
    }               reduce using rule 2 (program -> program_ins .)
    PRINT           shift and go to state 3
    {               shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    COMMENT         shift and go to state 12
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 17

    program_ins                    shift and go to state 2
    program                        shift and go to state 18
    assign                         shift and go to state 4
    cond_instruction               shift and go to state 5
    while_instruction              shift and go to state 6
    for_instruction                shift and go to state 7
    id                             shift and go to state 13

state 3

    (3) program_ins -> PRINT . value ;
    (13) value -> . operation , value
    (14) value -> . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    value                          shift and go to state 19
    operation                      shift and go to state 20
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 4

    (4) program_ins -> assign . ;

    ;               shift and go to state 34


state 5

    (5) program_ins -> cond_instruction .

    PRINT           reduce using rule 5 (program_ins -> cond_instruction .)
    {               reduce using rule 5 (program_ins -> cond_instruction .)
    BREAK           reduce using rule 5 (program_ins -> cond_instruction .)
    CONTINUE        reduce using rule 5 (program_ins -> cond_instruction .)
    RETURN          reduce using rule 5 (program_ins -> cond_instruction .)
    COMMENT         reduce using rule 5 (program_ins -> cond_instruction .)
    IF              reduce using rule 5 (program_ins -> cond_instruction .)
    WHILE           reduce using rule 5 (program_ins -> cond_instruction .)
    FOR             reduce using rule 5 (program_ins -> cond_instruction .)
    ID              reduce using rule 5 (program_ins -> cond_instruction .)
    $end            reduce using rule 5 (program_ins -> cond_instruction .)
    }               reduce using rule 5 (program_ins -> cond_instruction .)
    ELSE            reduce using rule 5 (program_ins -> cond_instruction .)


state 6

    (6) program_ins -> while_instruction .

    PRINT           reduce using rule 6 (program_ins -> while_instruction .)
    {               reduce using rule 6 (program_ins -> while_instruction .)
    BREAK           reduce using rule 6 (program_ins -> while_instruction .)
    CONTINUE        reduce using rule 6 (program_ins -> while_instruction .)
    RETURN          reduce using rule 6 (program_ins -> while_instruction .)
    COMMENT         reduce using rule 6 (program_ins -> while_instruction .)
    IF              reduce using rule 6 (program_ins -> while_instruction .)
    WHILE           reduce using rule 6 (program_ins -> while_instruction .)
    FOR             reduce using rule 6 (program_ins -> while_instruction .)
    ID              reduce using rule 6 (program_ins -> while_instruction .)
    $end            reduce using rule 6 (program_ins -> while_instruction .)
    }               reduce using rule 6 (program_ins -> while_instruction .)
    ELSE            reduce using rule 6 (program_ins -> while_instruction .)


state 7

    (7) program_ins -> for_instruction .

    PRINT           reduce using rule 7 (program_ins -> for_instruction .)
    {               reduce using rule 7 (program_ins -> for_instruction .)
    BREAK           reduce using rule 7 (program_ins -> for_instruction .)
    CONTINUE        reduce using rule 7 (program_ins -> for_instruction .)
    RETURN          reduce using rule 7 (program_ins -> for_instruction .)
    COMMENT         reduce using rule 7 (program_ins -> for_instruction .)
    IF              reduce using rule 7 (program_ins -> for_instruction .)
    WHILE           reduce using rule 7 (program_ins -> for_instruction .)
    FOR             reduce using rule 7 (program_ins -> for_instruction .)
    ID              reduce using rule 7 (program_ins -> for_instruction .)
    $end            reduce using rule 7 (program_ins -> for_instruction .)
    }               reduce using rule 7 (program_ins -> for_instruction .)
    ELSE            reduce using rule 7 (program_ins -> for_instruction .)


state 8

    (8) program_ins -> { . program }
    (1) program -> . program_ins program
    (2) program -> . program_ins
    (3) program_ins -> . PRINT value ;
    (4) program_ins -> . assign ;
    (5) program_ins -> . cond_instruction
    (6) program_ins -> . while_instruction
    (7) program_ins -> . for_instruction
    (8) program_ins -> . { program }
    (9) program_ins -> . BREAK ;
    (10) program_ins -> . CONTINUE ;
    (11) program_ins -> . RETURN operation ;
    (12) program_ins -> . COMMENT
    (15) assign -> . id assign_operator operation
    (16) assign -> . id [ index ] assign_operator operation
    (51) cond_instruction -> . IF ( condition ) program_ins
    (52) cond_instruction -> . IF ( condition ) program_ins ELSE program_ins
    (60) while_instruction -> . WHILE ( condition ) program_ins
    (61) for_instruction -> . FOR id = range program_ins
    (47) id -> . ID

    PRINT           shift and go to state 3
    {               shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    COMMENT         shift and go to state 12
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 17

    program                        shift and go to state 35
    program_ins                    shift and go to state 2
    assign                         shift and go to state 4
    cond_instruction               shift and go to state 5
    while_instruction              shift and go to state 6
    for_instruction                shift and go to state 7
    id                             shift and go to state 13

state 9

    (9) program_ins -> BREAK . ;

    ;               shift and go to state 36


state 10

    (10) program_ins -> CONTINUE . ;

    ;               shift and go to state 37


state 11

    (11) program_ins -> RETURN . operation ;
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 38
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 12

    (12) program_ins -> COMMENT .

    PRINT           reduce using rule 12 (program_ins -> COMMENT .)
    {               reduce using rule 12 (program_ins -> COMMENT .)
    BREAK           reduce using rule 12 (program_ins -> COMMENT .)
    CONTINUE        reduce using rule 12 (program_ins -> COMMENT .)
    RETURN          reduce using rule 12 (program_ins -> COMMENT .)
    COMMENT         reduce using rule 12 (program_ins -> COMMENT .)
    IF              reduce using rule 12 (program_ins -> COMMENT .)
    WHILE           reduce using rule 12 (program_ins -> COMMENT .)
    FOR             reduce using rule 12 (program_ins -> COMMENT .)
    ID              reduce using rule 12 (program_ins -> COMMENT .)
    $end            reduce using rule 12 (program_ins -> COMMENT .)
    }               reduce using rule 12 (program_ins -> COMMENT .)
    ELSE            reduce using rule 12 (program_ins -> COMMENT .)


state 13

    (15) assign -> id . assign_operator operation
    (16) assign -> id . [ index ] assign_operator operation
    (18) assign_operator -> . ADDASSIGN
    (19) assign_operator -> . SUBASSIGN
    (20) assign_operator -> . MULASSIGN
    (21) assign_operator -> . DIVASSIGN
    (22) assign_operator -> . =

    [               shift and go to state 40
    ADDASSIGN       shift and go to state 41
    SUBASSIGN       shift and go to state 42
    MULASSIGN       shift and go to state 43
    DIVASSIGN       shift and go to state 44
    =               shift and go to state 45

    assign_operator                shift and go to state 39

state 14

    (51) cond_instruction -> IF . ( condition ) program_ins
    (52) cond_instruction -> IF . ( condition ) program_ins ELSE program_ins

    (               shift and go to state 46


state 15

    (60) while_instruction -> WHILE . ( condition ) program_ins

    (               shift and go to state 47


state 16

    (61) for_instruction -> FOR . id = range program_ins
    (47) id -> . ID

    ID              shift and go to state 17

    id                             shift and go to state 48

state 17

    (47) id -> ID .

    [               reduce using rule 47 (id -> ID .)
    ADDASSIGN       reduce using rule 47 (id -> ID .)
    SUBASSIGN       reduce using rule 47 (id -> ID .)
    MULASSIGN       reduce using rule 47 (id -> ID .)
    DIVASSIGN       reduce using rule 47 (id -> ID .)
    =               reduce using rule 47 (id -> ID .)
    ,               reduce using rule 47 (id -> ID .)
    '               reduce using rule 47 (id -> ID .)
    +               reduce using rule 47 (id -> ID .)
    -               reduce using rule 47 (id -> ID .)
    DOTADD          reduce using rule 47 (id -> ID .)
    DOTSUB          reduce using rule 47 (id -> ID .)
    *               reduce using rule 47 (id -> ID .)
    /               reduce using rule 47 (id -> ID .)
    DOTMUL          reduce using rule 47 (id -> ID .)
    DOTDIV          reduce using rule 47 (id -> ID .)
    ;               reduce using rule 47 (id -> ID .)
    )               reduce using rule 47 (id -> ID .)
    ]               reduce using rule 47 (id -> ID .)
    EQ              reduce using rule 47 (id -> ID .)
    NEQ             reduce using rule 47 (id -> ID .)
    LT              reduce using rule 47 (id -> ID .)
    GT              reduce using rule 47 (id -> ID .)
    <               reduce using rule 47 (id -> ID .)
    >               reduce using rule 47 (id -> ID .)
    :               reduce using rule 47 (id -> ID .)
    PRINT           reduce using rule 47 (id -> ID .)
    {               reduce using rule 47 (id -> ID .)
    BREAK           reduce using rule 47 (id -> ID .)
    CONTINUE        reduce using rule 47 (id -> ID .)
    RETURN          reduce using rule 47 (id -> ID .)
    COMMENT         reduce using rule 47 (id -> ID .)
    IF              reduce using rule 47 (id -> ID .)
    WHILE           reduce using rule 47 (id -> ID .)
    FOR             reduce using rule 47 (id -> ID .)
    ID              reduce using rule 47 (id -> ID .)


state 18

    (1) program -> program_ins program .

    $end            reduce using rule 1 (program -> program_ins program .)
    }               reduce using rule 1 (program -> program_ins program .)


state 19

    (3) program_ins -> PRINT value . ;

    ;               shift and go to state 49


state 20

    (13) value -> operation . , value
    (14) value -> operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    ,               shift and go to state 50
    ;               reduce using rule 14 (value -> operation .)
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 21

    (30) operation -> - . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 62
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 22

    (32) operation -> ( . operation )
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 63
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 23

    (33) operation -> id .

    ,               reduce using rule 33 (operation -> id .)
    '               reduce using rule 33 (operation -> id .)
    +               reduce using rule 33 (operation -> id .)
    -               reduce using rule 33 (operation -> id .)
    DOTADD          reduce using rule 33 (operation -> id .)
    DOTSUB          reduce using rule 33 (operation -> id .)
    *               reduce using rule 33 (operation -> id .)
    /               reduce using rule 33 (operation -> id .)
    DOTMUL          reduce using rule 33 (operation -> id .)
    DOTDIV          reduce using rule 33 (operation -> id .)
    ;               reduce using rule 33 (operation -> id .)
    )               reduce using rule 33 (operation -> id .)
    ]               reduce using rule 33 (operation -> id .)
    EQ              reduce using rule 33 (operation -> id .)
    NEQ             reduce using rule 33 (operation -> id .)
    LT              reduce using rule 33 (operation -> id .)
    GT              reduce using rule 33 (operation -> id .)
    <               reduce using rule 33 (operation -> id .)
    >               reduce using rule 33 (operation -> id .)
    :               reduce using rule 33 (operation -> id .)
    PRINT           reduce using rule 33 (operation -> id .)
    {               reduce using rule 33 (operation -> id .)
    BREAK           reduce using rule 33 (operation -> id .)
    CONTINUE        reduce using rule 33 (operation -> id .)
    RETURN          reduce using rule 33 (operation -> id .)
    COMMENT         reduce using rule 33 (operation -> id .)
    IF              reduce using rule 33 (operation -> id .)
    WHILE           reduce using rule 33 (operation -> id .)
    FOR             reduce using rule 33 (operation -> id .)
    ID              reduce using rule 33 (operation -> id .)


state 24

    (34) operation -> INTNUM .

    ,               reduce using rule 34 (operation -> INTNUM .)
    '               reduce using rule 34 (operation -> INTNUM .)
    +               reduce using rule 34 (operation -> INTNUM .)
    -               reduce using rule 34 (operation -> INTNUM .)
    DOTADD          reduce using rule 34 (operation -> INTNUM .)
    DOTSUB          reduce using rule 34 (operation -> INTNUM .)
    *               reduce using rule 34 (operation -> INTNUM .)
    /               reduce using rule 34 (operation -> INTNUM .)
    DOTMUL          reduce using rule 34 (operation -> INTNUM .)
    DOTDIV          reduce using rule 34 (operation -> INTNUM .)
    ;               reduce using rule 34 (operation -> INTNUM .)
    )               reduce using rule 34 (operation -> INTNUM .)
    ]               reduce using rule 34 (operation -> INTNUM .)
    EQ              reduce using rule 34 (operation -> INTNUM .)
    NEQ             reduce using rule 34 (operation -> INTNUM .)
    LT              reduce using rule 34 (operation -> INTNUM .)
    GT              reduce using rule 34 (operation -> INTNUM .)
    <               reduce using rule 34 (operation -> INTNUM .)
    >               reduce using rule 34 (operation -> INTNUM .)
    :               reduce using rule 34 (operation -> INTNUM .)
    PRINT           reduce using rule 34 (operation -> INTNUM .)
    {               reduce using rule 34 (operation -> INTNUM .)
    BREAK           reduce using rule 34 (operation -> INTNUM .)
    CONTINUE        reduce using rule 34 (operation -> INTNUM .)
    RETURN          reduce using rule 34 (operation -> INTNUM .)
    COMMENT         reduce using rule 34 (operation -> INTNUM .)
    IF              reduce using rule 34 (operation -> INTNUM .)
    WHILE           reduce using rule 34 (operation -> INTNUM .)
    FOR             reduce using rule 34 (operation -> INTNUM .)
    ID              reduce using rule 34 (operation -> INTNUM .)


state 25

    (35) operation -> FLOATNUM .

    ,               reduce using rule 35 (operation -> FLOATNUM .)
    '               reduce using rule 35 (operation -> FLOATNUM .)
    +               reduce using rule 35 (operation -> FLOATNUM .)
    -               reduce using rule 35 (operation -> FLOATNUM .)
    DOTADD          reduce using rule 35 (operation -> FLOATNUM .)
    DOTSUB          reduce using rule 35 (operation -> FLOATNUM .)
    *               reduce using rule 35 (operation -> FLOATNUM .)
    /               reduce using rule 35 (operation -> FLOATNUM .)
    DOTMUL          reduce using rule 35 (operation -> FLOATNUM .)
    DOTDIV          reduce using rule 35 (operation -> FLOATNUM .)
    ;               reduce using rule 35 (operation -> FLOATNUM .)
    )               reduce using rule 35 (operation -> FLOATNUM .)
    ]               reduce using rule 35 (operation -> FLOATNUM .)
    EQ              reduce using rule 35 (operation -> FLOATNUM .)
    NEQ             reduce using rule 35 (operation -> FLOATNUM .)
    LT              reduce using rule 35 (operation -> FLOATNUM .)
    GT              reduce using rule 35 (operation -> FLOATNUM .)
    <               reduce using rule 35 (operation -> FLOATNUM .)
    >               reduce using rule 35 (operation -> FLOATNUM .)
    :               reduce using rule 35 (operation -> FLOATNUM .)
    PRINT           reduce using rule 35 (operation -> FLOATNUM .)
    {               reduce using rule 35 (operation -> FLOATNUM .)
    BREAK           reduce using rule 35 (operation -> FLOATNUM .)
    CONTINUE        reduce using rule 35 (operation -> FLOATNUM .)
    RETURN          reduce using rule 35 (operation -> FLOATNUM .)
    COMMENT         reduce using rule 35 (operation -> FLOATNUM .)
    IF              reduce using rule 35 (operation -> FLOATNUM .)
    WHILE           reduce using rule 35 (operation -> FLOATNUM .)
    FOR             reduce using rule 35 (operation -> FLOATNUM .)
    ID              reduce using rule 35 (operation -> FLOATNUM .)


state 26

    (36) operation -> fid . ( operation )

    (               shift and go to state 64


state 27

    (37) operation -> vector .

    ,               reduce using rule 37 (operation -> vector .)
    '               reduce using rule 37 (operation -> vector .)
    +               reduce using rule 37 (operation -> vector .)
    -               reduce using rule 37 (operation -> vector .)
    DOTADD          reduce using rule 37 (operation -> vector .)
    DOTSUB          reduce using rule 37 (operation -> vector .)
    *               reduce using rule 37 (operation -> vector .)
    /               reduce using rule 37 (operation -> vector .)
    DOTMUL          reduce using rule 37 (operation -> vector .)
    DOTDIV          reduce using rule 37 (operation -> vector .)
    ;               reduce using rule 37 (operation -> vector .)
    )               reduce using rule 37 (operation -> vector .)
    ]               reduce using rule 37 (operation -> vector .)
    EQ              reduce using rule 37 (operation -> vector .)
    NEQ             reduce using rule 37 (operation -> vector .)
    LT              reduce using rule 37 (operation -> vector .)
    GT              reduce using rule 37 (operation -> vector .)
    <               reduce using rule 37 (operation -> vector .)
    >               reduce using rule 37 (operation -> vector .)
    :               reduce using rule 37 (operation -> vector .)
    PRINT           reduce using rule 37 (operation -> vector .)
    {               reduce using rule 37 (operation -> vector .)
    BREAK           reduce using rule 37 (operation -> vector .)
    CONTINUE        reduce using rule 37 (operation -> vector .)
    RETURN          reduce using rule 37 (operation -> vector .)
    COMMENT         reduce using rule 37 (operation -> vector .)
    IF              reduce using rule 37 (operation -> vector .)
    WHILE           reduce using rule 37 (operation -> vector .)
    FOR             reduce using rule 37 (operation -> vector .)
    ID              reduce using rule 37 (operation -> vector .)


state 28

    (38) operation -> string .

    ,               reduce using rule 38 (operation -> string .)
    '               reduce using rule 38 (operation -> string .)
    +               reduce using rule 38 (operation -> string .)
    -               reduce using rule 38 (operation -> string .)
    DOTADD          reduce using rule 38 (operation -> string .)
    DOTSUB          reduce using rule 38 (operation -> string .)
    *               reduce using rule 38 (operation -> string .)
    /               reduce using rule 38 (operation -> string .)
    DOTMUL          reduce using rule 38 (operation -> string .)
    DOTDIV          reduce using rule 38 (operation -> string .)
    ;               reduce using rule 38 (operation -> string .)
    )               reduce using rule 38 (operation -> string .)
    ]               reduce using rule 38 (operation -> string .)
    EQ              reduce using rule 38 (operation -> string .)
    NEQ             reduce using rule 38 (operation -> string .)
    LT              reduce using rule 38 (operation -> string .)
    GT              reduce using rule 38 (operation -> string .)
    <               reduce using rule 38 (operation -> string .)
    >               reduce using rule 38 (operation -> string .)
    :               reduce using rule 38 (operation -> string .)
    PRINT           reduce using rule 38 (operation -> string .)
    {               reduce using rule 38 (operation -> string .)
    BREAK           reduce using rule 38 (operation -> string .)
    CONTINUE        reduce using rule 38 (operation -> string .)
    RETURN          reduce using rule 38 (operation -> string .)
    COMMENT         reduce using rule 38 (operation -> string .)
    IF              reduce using rule 38 (operation -> string .)
    WHILE           reduce using rule 38 (operation -> string .)
    FOR             reduce using rule 38 (operation -> string .)
    ID              reduce using rule 38 (operation -> string .)


state 29

    (48) fid -> ZEROS .

    (               reduce using rule 48 (fid -> ZEROS .)


state 30

    (49) fid -> ONES .

    (               reduce using rule 49 (fid -> ONES .)


state 31

    (50) fid -> EYE .

    (               reduce using rule 50 (fid -> EYE .)


state 32

    (25) vector -> [ . vector_val ]
    (26) vector_val -> . operation , vector_val
    (27) vector_val -> . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    vector_val                     shift and go to state 65
    operation                      shift and go to state 66
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 33

    (17) string -> STRING .

    ,               reduce using rule 17 (string -> STRING .)
    '               reduce using rule 17 (string -> STRING .)
    +               reduce using rule 17 (string -> STRING .)
    -               reduce using rule 17 (string -> STRING .)
    DOTADD          reduce using rule 17 (string -> STRING .)
    DOTSUB          reduce using rule 17 (string -> STRING .)
    *               reduce using rule 17 (string -> STRING .)
    /               reduce using rule 17 (string -> STRING .)
    DOTMUL          reduce using rule 17 (string -> STRING .)
    DOTDIV          reduce using rule 17 (string -> STRING .)
    ;               reduce using rule 17 (string -> STRING .)
    )               reduce using rule 17 (string -> STRING .)
    ]               reduce using rule 17 (string -> STRING .)
    EQ              reduce using rule 17 (string -> STRING .)
    NEQ             reduce using rule 17 (string -> STRING .)
    LT              reduce using rule 17 (string -> STRING .)
    GT              reduce using rule 17 (string -> STRING .)
    <               reduce using rule 17 (string -> STRING .)
    >               reduce using rule 17 (string -> STRING .)
    :               reduce using rule 17 (string -> STRING .)
    PRINT           reduce using rule 17 (string -> STRING .)
    {               reduce using rule 17 (string -> STRING .)
    BREAK           reduce using rule 17 (string -> STRING .)
    CONTINUE        reduce using rule 17 (string -> STRING .)
    RETURN          reduce using rule 17 (string -> STRING .)
    COMMENT         reduce using rule 17 (string -> STRING .)
    IF              reduce using rule 17 (string -> STRING .)
    WHILE           reduce using rule 17 (string -> STRING .)
    FOR             reduce using rule 17 (string -> STRING .)
    ID              reduce using rule 17 (string -> STRING .)


state 34

    (4) program_ins -> assign ; .

    PRINT           reduce using rule 4 (program_ins -> assign ; .)
    {               reduce using rule 4 (program_ins -> assign ; .)
    BREAK           reduce using rule 4 (program_ins -> assign ; .)
    CONTINUE        reduce using rule 4 (program_ins -> assign ; .)
    RETURN          reduce using rule 4 (program_ins -> assign ; .)
    COMMENT         reduce using rule 4 (program_ins -> assign ; .)
    IF              reduce using rule 4 (program_ins -> assign ; .)
    WHILE           reduce using rule 4 (program_ins -> assign ; .)
    FOR             reduce using rule 4 (program_ins -> assign ; .)
    ID              reduce using rule 4 (program_ins -> assign ; .)
    $end            reduce using rule 4 (program_ins -> assign ; .)
    }               reduce using rule 4 (program_ins -> assign ; .)
    ELSE            reduce using rule 4 (program_ins -> assign ; .)


state 35

    (8) program_ins -> { program . }

    }               shift and go to state 67


state 36

    (9) program_ins -> BREAK ; .

    PRINT           reduce using rule 9 (program_ins -> BREAK ; .)
    {               reduce using rule 9 (program_ins -> BREAK ; .)
    BREAK           reduce using rule 9 (program_ins -> BREAK ; .)
    CONTINUE        reduce using rule 9 (program_ins -> BREAK ; .)
    RETURN          reduce using rule 9 (program_ins -> BREAK ; .)
    COMMENT         reduce using rule 9 (program_ins -> BREAK ; .)
    IF              reduce using rule 9 (program_ins -> BREAK ; .)
    WHILE           reduce using rule 9 (program_ins -> BREAK ; .)
    FOR             reduce using rule 9 (program_ins -> BREAK ; .)
    ID              reduce using rule 9 (program_ins -> BREAK ; .)
    $end            reduce using rule 9 (program_ins -> BREAK ; .)
    }               reduce using rule 9 (program_ins -> BREAK ; .)
    ELSE            reduce using rule 9 (program_ins -> BREAK ; .)


state 37

    (10) program_ins -> CONTINUE ; .

    PRINT           reduce using rule 10 (program_ins -> CONTINUE ; .)
    {               reduce using rule 10 (program_ins -> CONTINUE ; .)
    BREAK           reduce using rule 10 (program_ins -> CONTINUE ; .)
    CONTINUE        reduce using rule 10 (program_ins -> CONTINUE ; .)
    RETURN          reduce using rule 10 (program_ins -> CONTINUE ; .)
    COMMENT         reduce using rule 10 (program_ins -> CONTINUE ; .)
    IF              reduce using rule 10 (program_ins -> CONTINUE ; .)
    WHILE           reduce using rule 10 (program_ins -> CONTINUE ; .)
    FOR             reduce using rule 10 (program_ins -> CONTINUE ; .)
    ID              reduce using rule 10 (program_ins -> CONTINUE ; .)
    $end            reduce using rule 10 (program_ins -> CONTINUE ; .)
    }               reduce using rule 10 (program_ins -> CONTINUE ; .)
    ELSE            reduce using rule 10 (program_ins -> CONTINUE ; .)


state 38

    (11) program_ins -> RETURN operation . ;
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    ;               shift and go to state 68
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 39

    (15) assign -> id assign_operator . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    id                             shift and go to state 23
    operation                      shift and go to state 69
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 40

    (16) assign -> id [ . index ] assign_operator operation
    (23) index -> . INTNUM , index
    (24) index -> . INTNUM

    INTNUM          shift and go to state 71

    index                          shift and go to state 70

state 41

    (18) assign_operator -> ADDASSIGN .

    -               reduce using rule 18 (assign_operator -> ADDASSIGN .)
    (               reduce using rule 18 (assign_operator -> ADDASSIGN .)
    INTNUM          reduce using rule 18 (assign_operator -> ADDASSIGN .)
    FLOATNUM        reduce using rule 18 (assign_operator -> ADDASSIGN .)
    ID              reduce using rule 18 (assign_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 18 (assign_operator -> ADDASSIGN .)
    ONES            reduce using rule 18 (assign_operator -> ADDASSIGN .)
    EYE             reduce using rule 18 (assign_operator -> ADDASSIGN .)
    [               reduce using rule 18 (assign_operator -> ADDASSIGN .)
    STRING          reduce using rule 18 (assign_operator -> ADDASSIGN .)


state 42

    (19) assign_operator -> SUBASSIGN .

    -               reduce using rule 19 (assign_operator -> SUBASSIGN .)
    (               reduce using rule 19 (assign_operator -> SUBASSIGN .)
    INTNUM          reduce using rule 19 (assign_operator -> SUBASSIGN .)
    FLOATNUM        reduce using rule 19 (assign_operator -> SUBASSIGN .)
    ID              reduce using rule 19 (assign_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 19 (assign_operator -> SUBASSIGN .)
    ONES            reduce using rule 19 (assign_operator -> SUBASSIGN .)
    EYE             reduce using rule 19 (assign_operator -> SUBASSIGN .)
    [               reduce using rule 19 (assign_operator -> SUBASSIGN .)
    STRING          reduce using rule 19 (assign_operator -> SUBASSIGN .)


state 43

    (20) assign_operator -> MULASSIGN .

    -               reduce using rule 20 (assign_operator -> MULASSIGN .)
    (               reduce using rule 20 (assign_operator -> MULASSIGN .)
    INTNUM          reduce using rule 20 (assign_operator -> MULASSIGN .)
    FLOATNUM        reduce using rule 20 (assign_operator -> MULASSIGN .)
    ID              reduce using rule 20 (assign_operator -> MULASSIGN .)
    ZEROS           reduce using rule 20 (assign_operator -> MULASSIGN .)
    ONES            reduce using rule 20 (assign_operator -> MULASSIGN .)
    EYE             reduce using rule 20 (assign_operator -> MULASSIGN .)
    [               reduce using rule 20 (assign_operator -> MULASSIGN .)
    STRING          reduce using rule 20 (assign_operator -> MULASSIGN .)


state 44

    (21) assign_operator -> DIVASSIGN .

    -               reduce using rule 21 (assign_operator -> DIVASSIGN .)
    (               reduce using rule 21 (assign_operator -> DIVASSIGN .)
    INTNUM          reduce using rule 21 (assign_operator -> DIVASSIGN .)
    FLOATNUM        reduce using rule 21 (assign_operator -> DIVASSIGN .)
    ID              reduce using rule 21 (assign_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 21 (assign_operator -> DIVASSIGN .)
    ONES            reduce using rule 21 (assign_operator -> DIVASSIGN .)
    EYE             reduce using rule 21 (assign_operator -> DIVASSIGN .)
    [               reduce using rule 21 (assign_operator -> DIVASSIGN .)
    STRING          reduce using rule 21 (assign_operator -> DIVASSIGN .)


state 45

    (22) assign_operator -> = .

    -               reduce using rule 22 (assign_operator -> = .)
    (               reduce using rule 22 (assign_operator -> = .)
    INTNUM          reduce using rule 22 (assign_operator -> = .)
    FLOATNUM        reduce using rule 22 (assign_operator -> = .)
    ID              reduce using rule 22 (assign_operator -> = .)
    ZEROS           reduce using rule 22 (assign_operator -> = .)
    ONES            reduce using rule 22 (assign_operator -> = .)
    EYE             reduce using rule 22 (assign_operator -> = .)
    [               reduce using rule 22 (assign_operator -> = .)
    STRING          reduce using rule 22 (assign_operator -> = .)


state 46

    (51) cond_instruction -> IF ( . condition ) program_ins
    (52) cond_instruction -> IF ( . condition ) program_ins ELSE program_ins
    (53) condition -> . operation comparison_operator operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    condition                      shift and go to state 72
    operation                      shift and go to state 73
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 47

    (60) while_instruction -> WHILE ( . condition ) program_ins
    (53) condition -> . operation comparison_operator operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    condition                      shift and go to state 74
    operation                      shift and go to state 73
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 48

    (61) for_instruction -> FOR id . = range program_ins

    =               shift and go to state 75


state 49

    (3) program_ins -> PRINT value ; .

    PRINT           reduce using rule 3 (program_ins -> PRINT value ; .)
    {               reduce using rule 3 (program_ins -> PRINT value ; .)
    BREAK           reduce using rule 3 (program_ins -> PRINT value ; .)
    CONTINUE        reduce using rule 3 (program_ins -> PRINT value ; .)
    RETURN          reduce using rule 3 (program_ins -> PRINT value ; .)
    COMMENT         reduce using rule 3 (program_ins -> PRINT value ; .)
    IF              reduce using rule 3 (program_ins -> PRINT value ; .)
    WHILE           reduce using rule 3 (program_ins -> PRINT value ; .)
    FOR             reduce using rule 3 (program_ins -> PRINT value ; .)
    ID              reduce using rule 3 (program_ins -> PRINT value ; .)
    $end            reduce using rule 3 (program_ins -> PRINT value ; .)
    }               reduce using rule 3 (program_ins -> PRINT value ; .)
    ELSE            reduce using rule 3 (program_ins -> PRINT value ; .)


state 50

    (13) value -> operation , . value
    (13) value -> . operation , value
    (14) value -> . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 20
    value                          shift and go to state 76
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 51

    (28) operation -> operation add_operator . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 77
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 52

    (29) operation -> operation mul_operator . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 78
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 53

    (31) operation -> operation ' .

    ,               reduce using rule 31 (operation -> operation ' .)
    '               reduce using rule 31 (operation -> operation ' .)
    +               reduce using rule 31 (operation -> operation ' .)
    -               reduce using rule 31 (operation -> operation ' .)
    DOTADD          reduce using rule 31 (operation -> operation ' .)
    DOTSUB          reduce using rule 31 (operation -> operation ' .)
    *               reduce using rule 31 (operation -> operation ' .)
    /               reduce using rule 31 (operation -> operation ' .)
    DOTMUL          reduce using rule 31 (operation -> operation ' .)
    DOTDIV          reduce using rule 31 (operation -> operation ' .)
    ;               reduce using rule 31 (operation -> operation ' .)
    )               reduce using rule 31 (operation -> operation ' .)
    ]               reduce using rule 31 (operation -> operation ' .)
    EQ              reduce using rule 31 (operation -> operation ' .)
    NEQ             reduce using rule 31 (operation -> operation ' .)
    LT              reduce using rule 31 (operation -> operation ' .)
    GT              reduce using rule 31 (operation -> operation ' .)
    <               reduce using rule 31 (operation -> operation ' .)
    >               reduce using rule 31 (operation -> operation ' .)
    :               reduce using rule 31 (operation -> operation ' .)
    PRINT           reduce using rule 31 (operation -> operation ' .)
    {               reduce using rule 31 (operation -> operation ' .)
    BREAK           reduce using rule 31 (operation -> operation ' .)
    CONTINUE        reduce using rule 31 (operation -> operation ' .)
    RETURN          reduce using rule 31 (operation -> operation ' .)
    COMMENT         reduce using rule 31 (operation -> operation ' .)
    IF              reduce using rule 31 (operation -> operation ' .)
    WHILE           reduce using rule 31 (operation -> operation ' .)
    FOR             reduce using rule 31 (operation -> operation ' .)
    ID              reduce using rule 31 (operation -> operation ' .)


state 54

    (43) add_operator -> + .

    -               reduce using rule 43 (add_operator -> + .)
    (               reduce using rule 43 (add_operator -> + .)
    INTNUM          reduce using rule 43 (add_operator -> + .)
    FLOATNUM        reduce using rule 43 (add_operator -> + .)
    ID              reduce using rule 43 (add_operator -> + .)
    ZEROS           reduce using rule 43 (add_operator -> + .)
    ONES            reduce using rule 43 (add_operator -> + .)
    EYE             reduce using rule 43 (add_operator -> + .)
    [               reduce using rule 43 (add_operator -> + .)
    STRING          reduce using rule 43 (add_operator -> + .)


state 55

    (44) add_operator -> - .

    -               reduce using rule 44 (add_operator -> - .)
    (               reduce using rule 44 (add_operator -> - .)
    INTNUM          reduce using rule 44 (add_operator -> - .)
    FLOATNUM        reduce using rule 44 (add_operator -> - .)
    ID              reduce using rule 44 (add_operator -> - .)
    ZEROS           reduce using rule 44 (add_operator -> - .)
    ONES            reduce using rule 44 (add_operator -> - .)
    EYE             reduce using rule 44 (add_operator -> - .)
    [               reduce using rule 44 (add_operator -> - .)
    STRING          reduce using rule 44 (add_operator -> - .)


state 56

    (45) add_operator -> DOTADD .

    -               reduce using rule 45 (add_operator -> DOTADD .)
    (               reduce using rule 45 (add_operator -> DOTADD .)
    INTNUM          reduce using rule 45 (add_operator -> DOTADD .)
    FLOATNUM        reduce using rule 45 (add_operator -> DOTADD .)
    ID              reduce using rule 45 (add_operator -> DOTADD .)
    ZEROS           reduce using rule 45 (add_operator -> DOTADD .)
    ONES            reduce using rule 45 (add_operator -> DOTADD .)
    EYE             reduce using rule 45 (add_operator -> DOTADD .)
    [               reduce using rule 45 (add_operator -> DOTADD .)
    STRING          reduce using rule 45 (add_operator -> DOTADD .)


state 57

    (46) add_operator -> DOTSUB .

    -               reduce using rule 46 (add_operator -> DOTSUB .)
    (               reduce using rule 46 (add_operator -> DOTSUB .)
    INTNUM          reduce using rule 46 (add_operator -> DOTSUB .)
    FLOATNUM        reduce using rule 46 (add_operator -> DOTSUB .)
    ID              reduce using rule 46 (add_operator -> DOTSUB .)
    ZEROS           reduce using rule 46 (add_operator -> DOTSUB .)
    ONES            reduce using rule 46 (add_operator -> DOTSUB .)
    EYE             reduce using rule 46 (add_operator -> DOTSUB .)
    [               reduce using rule 46 (add_operator -> DOTSUB .)
    STRING          reduce using rule 46 (add_operator -> DOTSUB .)


state 58

    (39) mul_operator -> * .

    -               reduce using rule 39 (mul_operator -> * .)
    (               reduce using rule 39 (mul_operator -> * .)
    INTNUM          reduce using rule 39 (mul_operator -> * .)
    FLOATNUM        reduce using rule 39 (mul_operator -> * .)
    ID              reduce using rule 39 (mul_operator -> * .)
    ZEROS           reduce using rule 39 (mul_operator -> * .)
    ONES            reduce using rule 39 (mul_operator -> * .)
    EYE             reduce using rule 39 (mul_operator -> * .)
    [               reduce using rule 39 (mul_operator -> * .)
    STRING          reduce using rule 39 (mul_operator -> * .)


state 59

    (40) mul_operator -> / .

    -               reduce using rule 40 (mul_operator -> / .)
    (               reduce using rule 40 (mul_operator -> / .)
    INTNUM          reduce using rule 40 (mul_operator -> / .)
    FLOATNUM        reduce using rule 40 (mul_operator -> / .)
    ID              reduce using rule 40 (mul_operator -> / .)
    ZEROS           reduce using rule 40 (mul_operator -> / .)
    ONES            reduce using rule 40 (mul_operator -> / .)
    EYE             reduce using rule 40 (mul_operator -> / .)
    [               reduce using rule 40 (mul_operator -> / .)
    STRING          reduce using rule 40 (mul_operator -> / .)


state 60

    (41) mul_operator -> DOTMUL .

    -               reduce using rule 41 (mul_operator -> DOTMUL .)
    (               reduce using rule 41 (mul_operator -> DOTMUL .)
    INTNUM          reduce using rule 41 (mul_operator -> DOTMUL .)
    FLOATNUM        reduce using rule 41 (mul_operator -> DOTMUL .)
    ID              reduce using rule 41 (mul_operator -> DOTMUL .)
    ZEROS           reduce using rule 41 (mul_operator -> DOTMUL .)
    ONES            reduce using rule 41 (mul_operator -> DOTMUL .)
    EYE             reduce using rule 41 (mul_operator -> DOTMUL .)
    [               reduce using rule 41 (mul_operator -> DOTMUL .)
    STRING          reduce using rule 41 (mul_operator -> DOTMUL .)


state 61

    (42) mul_operator -> DOTDIV .

    -               reduce using rule 42 (mul_operator -> DOTDIV .)
    (               reduce using rule 42 (mul_operator -> DOTDIV .)
    INTNUM          reduce using rule 42 (mul_operator -> DOTDIV .)
    FLOATNUM        reduce using rule 42 (mul_operator -> DOTDIV .)
    ID              reduce using rule 42 (mul_operator -> DOTDIV .)
    ZEROS           reduce using rule 42 (mul_operator -> DOTDIV .)
    ONES            reduce using rule 42 (mul_operator -> DOTDIV .)
    EYE             reduce using rule 42 (mul_operator -> DOTDIV .)
    [               reduce using rule 42 (mul_operator -> DOTDIV .)
    STRING          reduce using rule 42 (mul_operator -> DOTDIV .)


state 62

    (30) operation -> - operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    ,               reduce using rule 30 (operation -> - operation .)
    '               reduce using rule 30 (operation -> - operation .)
    +               reduce using rule 30 (operation -> - operation .)
    -               reduce using rule 30 (operation -> - operation .)
    DOTADD          reduce using rule 30 (operation -> - operation .)
    DOTSUB          reduce using rule 30 (operation -> - operation .)
    *               reduce using rule 30 (operation -> - operation .)
    /               reduce using rule 30 (operation -> - operation .)
    DOTMUL          reduce using rule 30 (operation -> - operation .)
    DOTDIV          reduce using rule 30 (operation -> - operation .)
    ;               reduce using rule 30 (operation -> - operation .)
    )               reduce using rule 30 (operation -> - operation .)
    ]               reduce using rule 30 (operation -> - operation .)
    EQ              reduce using rule 30 (operation -> - operation .)
    NEQ             reduce using rule 30 (operation -> - operation .)
    LT              reduce using rule 30 (operation -> - operation .)
    GT              reduce using rule 30 (operation -> - operation .)
    <               reduce using rule 30 (operation -> - operation .)
    >               reduce using rule 30 (operation -> - operation .)
    :               reduce using rule 30 (operation -> - operation .)
    PRINT           reduce using rule 30 (operation -> - operation .)
    {               reduce using rule 30 (operation -> - operation .)
    BREAK           reduce using rule 30 (operation -> - operation .)
    CONTINUE        reduce using rule 30 (operation -> - operation .)
    RETURN          reduce using rule 30 (operation -> - operation .)
    COMMENT         reduce using rule 30 (operation -> - operation .)
    IF              reduce using rule 30 (operation -> - operation .)
    WHILE           reduce using rule 30 (operation -> - operation .)
    FOR             reduce using rule 30 (operation -> - operation .)
    ID              reduce using rule 30 (operation -> - operation .)

  ! '               [ shift and go to state 53 ]
  ! +               [ shift and go to state 54 ]
  ! -               [ shift and go to state 55 ]
  ! DOTADD          [ shift and go to state 56 ]
  ! DOTSUB          [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTMUL          [ shift and go to state 60 ]
  ! DOTDIV          [ shift and go to state 61 ]

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 63

    (32) operation -> ( operation . )
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    )               shift and go to state 79
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 64

    (36) operation -> fid ( . operation )
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    fid                            shift and go to state 26
    operation                      shift and go to state 80
    id                             shift and go to state 23
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 65

    (25) vector -> [ vector_val . ]

    ]               shift and go to state 81


state 66

    (26) vector_val -> operation . , vector_val
    (27) vector_val -> operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    ,               shift and go to state 82
    ]               reduce using rule 27 (vector_val -> operation .)
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 67

    (8) program_ins -> { program } .

    PRINT           reduce using rule 8 (program_ins -> { program } .)
    {               reduce using rule 8 (program_ins -> { program } .)
    BREAK           reduce using rule 8 (program_ins -> { program } .)
    CONTINUE        reduce using rule 8 (program_ins -> { program } .)
    RETURN          reduce using rule 8 (program_ins -> { program } .)
    COMMENT         reduce using rule 8 (program_ins -> { program } .)
    IF              reduce using rule 8 (program_ins -> { program } .)
    WHILE           reduce using rule 8 (program_ins -> { program } .)
    FOR             reduce using rule 8 (program_ins -> { program } .)
    ID              reduce using rule 8 (program_ins -> { program } .)
    $end            reduce using rule 8 (program_ins -> { program } .)
    }               reduce using rule 8 (program_ins -> { program } .)
    ELSE            reduce using rule 8 (program_ins -> { program } .)


state 68

    (11) program_ins -> RETURN operation ; .

    PRINT           reduce using rule 11 (program_ins -> RETURN operation ; .)
    {               reduce using rule 11 (program_ins -> RETURN operation ; .)
    BREAK           reduce using rule 11 (program_ins -> RETURN operation ; .)
    CONTINUE        reduce using rule 11 (program_ins -> RETURN operation ; .)
    RETURN          reduce using rule 11 (program_ins -> RETURN operation ; .)
    COMMENT         reduce using rule 11 (program_ins -> RETURN operation ; .)
    IF              reduce using rule 11 (program_ins -> RETURN operation ; .)
    WHILE           reduce using rule 11 (program_ins -> RETURN operation ; .)
    FOR             reduce using rule 11 (program_ins -> RETURN operation ; .)
    ID              reduce using rule 11 (program_ins -> RETURN operation ; .)
    $end            reduce using rule 11 (program_ins -> RETURN operation ; .)
    }               reduce using rule 11 (program_ins -> RETURN operation ; .)
    ELSE            reduce using rule 11 (program_ins -> RETURN operation ; .)


state 69

    (15) assign -> id assign_operator operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    ;               reduce using rule 15 (assign -> id assign_operator operation .)
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 70

    (16) assign -> id [ index . ] assign_operator operation

    ]               shift and go to state 83


state 71

    (23) index -> INTNUM . , index
    (24) index -> INTNUM .

    ,               shift and go to state 84
    ]               reduce using rule 24 (index -> INTNUM .)


state 72

    (51) cond_instruction -> IF ( condition . ) program_ins
    (52) cond_instruction -> IF ( condition . ) program_ins ELSE program_ins

    )               shift and go to state 85


state 73

    (53) condition -> operation . comparison_operator operation
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (54) comparison_operator -> . EQ
    (55) comparison_operator -> . NEQ
    (56) comparison_operator -> . LT
    (57) comparison_operator -> . GT
    (58) comparison_operator -> . <
    (59) comparison_operator -> . >
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    '               shift and go to state 53
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    <               shift and go to state 91
    >               shift and go to state 92
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    comparison_operator            shift and go to state 86
    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 74

    (60) while_instruction -> WHILE ( condition . ) program_ins

    )               shift and go to state 93


state 75

    (61) for_instruction -> FOR id = . range program_ins
    (62) range -> . operation : operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    id                             shift and go to state 23
    range                          shift and go to state 94
    operation                      shift and go to state 95
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 76

    (13) value -> operation , value .

    ;               reduce using rule 13 (value -> operation , value .)


state 77

    (28) operation -> operation add_operator operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    ,               reduce using rule 28 (operation -> operation add_operator operation .)
    +               reduce using rule 28 (operation -> operation add_operator operation .)
    -               reduce using rule 28 (operation -> operation add_operator operation .)
    DOTADD          reduce using rule 28 (operation -> operation add_operator operation .)
    DOTSUB          reduce using rule 28 (operation -> operation add_operator operation .)
    DOTMUL          reduce using rule 28 (operation -> operation add_operator operation .)
    DOTDIV          reduce using rule 28 (operation -> operation add_operator operation .)
    ;               reduce using rule 28 (operation -> operation add_operator operation .)
    )               reduce using rule 28 (operation -> operation add_operator operation .)
    ]               reduce using rule 28 (operation -> operation add_operator operation .)
    EQ              reduce using rule 28 (operation -> operation add_operator operation .)
    NEQ             reduce using rule 28 (operation -> operation add_operator operation .)
    LT              reduce using rule 28 (operation -> operation add_operator operation .)
    GT              reduce using rule 28 (operation -> operation add_operator operation .)
    <               reduce using rule 28 (operation -> operation add_operator operation .)
    >               reduce using rule 28 (operation -> operation add_operator operation .)
    :               reduce using rule 28 (operation -> operation add_operator operation .)
    PRINT           reduce using rule 28 (operation -> operation add_operator operation .)
    {               reduce using rule 28 (operation -> operation add_operator operation .)
    BREAK           reduce using rule 28 (operation -> operation add_operator operation .)
    CONTINUE        reduce using rule 28 (operation -> operation add_operator operation .)
    RETURN          reduce using rule 28 (operation -> operation add_operator operation .)
    COMMENT         reduce using rule 28 (operation -> operation add_operator operation .)
    IF              reduce using rule 28 (operation -> operation add_operator operation .)
    WHILE           reduce using rule 28 (operation -> operation add_operator operation .)
    FOR             reduce using rule 28 (operation -> operation add_operator operation .)
    ID              reduce using rule 28 (operation -> operation add_operator operation .)
    '               shift and go to state 53
    *               shift and go to state 58
    /               shift and go to state 59

  ! '               [ reduce using rule 28 (operation -> operation add_operator operation .) ]
  ! *               [ reduce using rule 28 (operation -> operation add_operator operation .) ]
  ! /               [ reduce using rule 28 (operation -> operation add_operator operation .) ]
  ! +               [ shift and go to state 54 ]
  ! -               [ shift and go to state 55 ]
  ! DOTADD          [ shift and go to state 56 ]
  ! DOTSUB          [ shift and go to state 57 ]
  ! DOTMUL          [ shift and go to state 60 ]
  ! DOTDIV          [ shift and go to state 61 ]

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 78

    (29) operation -> operation mul_operator operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    ,               reduce using rule 29 (operation -> operation mul_operator operation .)
    +               reduce using rule 29 (operation -> operation mul_operator operation .)
    -               reduce using rule 29 (operation -> operation mul_operator operation .)
    DOTADD          reduce using rule 29 (operation -> operation mul_operator operation .)
    DOTSUB          reduce using rule 29 (operation -> operation mul_operator operation .)
    *               reduce using rule 29 (operation -> operation mul_operator operation .)
    /               reduce using rule 29 (operation -> operation mul_operator operation .)
    DOTMUL          reduce using rule 29 (operation -> operation mul_operator operation .)
    DOTDIV          reduce using rule 29 (operation -> operation mul_operator operation .)
    ;               reduce using rule 29 (operation -> operation mul_operator operation .)
    )               reduce using rule 29 (operation -> operation mul_operator operation .)
    ]               reduce using rule 29 (operation -> operation mul_operator operation .)
    EQ              reduce using rule 29 (operation -> operation mul_operator operation .)
    NEQ             reduce using rule 29 (operation -> operation mul_operator operation .)
    LT              reduce using rule 29 (operation -> operation mul_operator operation .)
    GT              reduce using rule 29 (operation -> operation mul_operator operation .)
    <               reduce using rule 29 (operation -> operation mul_operator operation .)
    >               reduce using rule 29 (operation -> operation mul_operator operation .)
    :               reduce using rule 29 (operation -> operation mul_operator operation .)
    PRINT           reduce using rule 29 (operation -> operation mul_operator operation .)
    {               reduce using rule 29 (operation -> operation mul_operator operation .)
    BREAK           reduce using rule 29 (operation -> operation mul_operator operation .)
    CONTINUE        reduce using rule 29 (operation -> operation mul_operator operation .)
    RETURN          reduce using rule 29 (operation -> operation mul_operator operation .)
    COMMENT         reduce using rule 29 (operation -> operation mul_operator operation .)
    IF              reduce using rule 29 (operation -> operation mul_operator operation .)
    WHILE           reduce using rule 29 (operation -> operation mul_operator operation .)
    FOR             reduce using rule 29 (operation -> operation mul_operator operation .)
    ID              reduce using rule 29 (operation -> operation mul_operator operation .)
    '               shift and go to state 53

  ! '               [ reduce using rule 29 (operation -> operation mul_operator operation .) ]
  ! +               [ shift and go to state 54 ]
  ! -               [ shift and go to state 55 ]
  ! DOTADD          [ shift and go to state 56 ]
  ! DOTSUB          [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTMUL          [ shift and go to state 60 ]
  ! DOTDIV          [ shift and go to state 61 ]

    mul_operator                   shift and go to state 52
    add_operator                   shift and go to state 51

state 79

    (32) operation -> ( operation ) .

    ,               reduce using rule 32 (operation -> ( operation ) .)
    '               reduce using rule 32 (operation -> ( operation ) .)
    +               reduce using rule 32 (operation -> ( operation ) .)
    -               reduce using rule 32 (operation -> ( operation ) .)
    DOTADD          reduce using rule 32 (operation -> ( operation ) .)
    DOTSUB          reduce using rule 32 (operation -> ( operation ) .)
    *               reduce using rule 32 (operation -> ( operation ) .)
    /               reduce using rule 32 (operation -> ( operation ) .)
    DOTMUL          reduce using rule 32 (operation -> ( operation ) .)
    DOTDIV          reduce using rule 32 (operation -> ( operation ) .)
    ;               reduce using rule 32 (operation -> ( operation ) .)
    )               reduce using rule 32 (operation -> ( operation ) .)
    ]               reduce using rule 32 (operation -> ( operation ) .)
    EQ              reduce using rule 32 (operation -> ( operation ) .)
    NEQ             reduce using rule 32 (operation -> ( operation ) .)
    LT              reduce using rule 32 (operation -> ( operation ) .)
    GT              reduce using rule 32 (operation -> ( operation ) .)
    <               reduce using rule 32 (operation -> ( operation ) .)
    >               reduce using rule 32 (operation -> ( operation ) .)
    :               reduce using rule 32 (operation -> ( operation ) .)
    PRINT           reduce using rule 32 (operation -> ( operation ) .)
    {               reduce using rule 32 (operation -> ( operation ) .)
    BREAK           reduce using rule 32 (operation -> ( operation ) .)
    CONTINUE        reduce using rule 32 (operation -> ( operation ) .)
    RETURN          reduce using rule 32 (operation -> ( operation ) .)
    COMMENT         reduce using rule 32 (operation -> ( operation ) .)
    IF              reduce using rule 32 (operation -> ( operation ) .)
    WHILE           reduce using rule 32 (operation -> ( operation ) .)
    FOR             reduce using rule 32 (operation -> ( operation ) .)
    ID              reduce using rule 32 (operation -> ( operation ) .)


state 80

    (36) operation -> fid ( operation . )
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    )               shift and go to state 96
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 81

    (25) vector -> [ vector_val ] .

    ,               reduce using rule 25 (vector -> [ vector_val ] .)
    '               reduce using rule 25 (vector -> [ vector_val ] .)
    +               reduce using rule 25 (vector -> [ vector_val ] .)
    -               reduce using rule 25 (vector -> [ vector_val ] .)
    DOTADD          reduce using rule 25 (vector -> [ vector_val ] .)
    DOTSUB          reduce using rule 25 (vector -> [ vector_val ] .)
    *               reduce using rule 25 (vector -> [ vector_val ] .)
    /               reduce using rule 25 (vector -> [ vector_val ] .)
    DOTMUL          reduce using rule 25 (vector -> [ vector_val ] .)
    DOTDIV          reduce using rule 25 (vector -> [ vector_val ] .)
    ;               reduce using rule 25 (vector -> [ vector_val ] .)
    )               reduce using rule 25 (vector -> [ vector_val ] .)
    ]               reduce using rule 25 (vector -> [ vector_val ] .)
    EQ              reduce using rule 25 (vector -> [ vector_val ] .)
    NEQ             reduce using rule 25 (vector -> [ vector_val ] .)
    LT              reduce using rule 25 (vector -> [ vector_val ] .)
    GT              reduce using rule 25 (vector -> [ vector_val ] .)
    <               reduce using rule 25 (vector -> [ vector_val ] .)
    >               reduce using rule 25 (vector -> [ vector_val ] .)
    :               reduce using rule 25 (vector -> [ vector_val ] .)
    PRINT           reduce using rule 25 (vector -> [ vector_val ] .)
    {               reduce using rule 25 (vector -> [ vector_val ] .)
    BREAK           reduce using rule 25 (vector -> [ vector_val ] .)
    CONTINUE        reduce using rule 25 (vector -> [ vector_val ] .)
    RETURN          reduce using rule 25 (vector -> [ vector_val ] .)
    COMMENT         reduce using rule 25 (vector -> [ vector_val ] .)
    IF              reduce using rule 25 (vector -> [ vector_val ] .)
    WHILE           reduce using rule 25 (vector -> [ vector_val ] .)
    FOR             reduce using rule 25 (vector -> [ vector_val ] .)
    ID              reduce using rule 25 (vector -> [ vector_val ] .)


state 82

    (26) vector_val -> operation , . vector_val
    (26) vector_val -> . operation , vector_val
    (27) vector_val -> . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 66
    vector_val                     shift and go to state 97
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 83

    (16) assign -> id [ index ] . assign_operator operation
    (18) assign_operator -> . ADDASSIGN
    (19) assign_operator -> . SUBASSIGN
    (20) assign_operator -> . MULASSIGN
    (21) assign_operator -> . DIVASSIGN
    (22) assign_operator -> . =

    ADDASSIGN       shift and go to state 41
    SUBASSIGN       shift and go to state 42
    MULASSIGN       shift and go to state 43
    DIVASSIGN       shift and go to state 44
    =               shift and go to state 45

    assign_operator                shift and go to state 98

state 84

    (23) index -> INTNUM , . index
    (23) index -> . INTNUM , index
    (24) index -> . INTNUM

    INTNUM          shift and go to state 71

    index                          shift and go to state 99

state 85

    (51) cond_instruction -> IF ( condition ) . program_ins
    (52) cond_instruction -> IF ( condition ) . program_ins ELSE program_ins
    (3) program_ins -> . PRINT value ;
    (4) program_ins -> . assign ;
    (5) program_ins -> . cond_instruction
    (6) program_ins -> . while_instruction
    (7) program_ins -> . for_instruction
    (8) program_ins -> . { program }
    (9) program_ins -> . BREAK ;
    (10) program_ins -> . CONTINUE ;
    (11) program_ins -> . RETURN operation ;
    (12) program_ins -> . COMMENT
    (15) assign -> . id assign_operator operation
    (16) assign -> . id [ index ] assign_operator operation
    (51) cond_instruction -> . IF ( condition ) program_ins
    (52) cond_instruction -> . IF ( condition ) program_ins ELSE program_ins
    (60) while_instruction -> . WHILE ( condition ) program_ins
    (61) for_instruction -> . FOR id = range program_ins
    (47) id -> . ID

    PRINT           shift and go to state 3
    {               shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    COMMENT         shift and go to state 12
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 17

    program_ins                    shift and go to state 100
    assign                         shift and go to state 4
    cond_instruction               shift and go to state 5
    while_instruction              shift and go to state 6
    for_instruction                shift and go to state 7
    id                             shift and go to state 13

state 86

    (53) condition -> operation comparison_operator . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 101
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 87

    (54) comparison_operator -> EQ .

    -               reduce using rule 54 (comparison_operator -> EQ .)
    (               reduce using rule 54 (comparison_operator -> EQ .)
    INTNUM          reduce using rule 54 (comparison_operator -> EQ .)
    FLOATNUM        reduce using rule 54 (comparison_operator -> EQ .)
    ID              reduce using rule 54 (comparison_operator -> EQ .)
    ZEROS           reduce using rule 54 (comparison_operator -> EQ .)
    ONES            reduce using rule 54 (comparison_operator -> EQ .)
    EYE             reduce using rule 54 (comparison_operator -> EQ .)
    [               reduce using rule 54 (comparison_operator -> EQ .)
    STRING          reduce using rule 54 (comparison_operator -> EQ .)


state 88

    (55) comparison_operator -> NEQ .

    -               reduce using rule 55 (comparison_operator -> NEQ .)
    (               reduce using rule 55 (comparison_operator -> NEQ .)
    INTNUM          reduce using rule 55 (comparison_operator -> NEQ .)
    FLOATNUM        reduce using rule 55 (comparison_operator -> NEQ .)
    ID              reduce using rule 55 (comparison_operator -> NEQ .)
    ZEROS           reduce using rule 55 (comparison_operator -> NEQ .)
    ONES            reduce using rule 55 (comparison_operator -> NEQ .)
    EYE             reduce using rule 55 (comparison_operator -> NEQ .)
    [               reduce using rule 55 (comparison_operator -> NEQ .)
    STRING          reduce using rule 55 (comparison_operator -> NEQ .)


state 89

    (56) comparison_operator -> LT .

    -               reduce using rule 56 (comparison_operator -> LT .)
    (               reduce using rule 56 (comparison_operator -> LT .)
    INTNUM          reduce using rule 56 (comparison_operator -> LT .)
    FLOATNUM        reduce using rule 56 (comparison_operator -> LT .)
    ID              reduce using rule 56 (comparison_operator -> LT .)
    ZEROS           reduce using rule 56 (comparison_operator -> LT .)
    ONES            reduce using rule 56 (comparison_operator -> LT .)
    EYE             reduce using rule 56 (comparison_operator -> LT .)
    [               reduce using rule 56 (comparison_operator -> LT .)
    STRING          reduce using rule 56 (comparison_operator -> LT .)


state 90

    (57) comparison_operator -> GT .

    -               reduce using rule 57 (comparison_operator -> GT .)
    (               reduce using rule 57 (comparison_operator -> GT .)
    INTNUM          reduce using rule 57 (comparison_operator -> GT .)
    FLOATNUM        reduce using rule 57 (comparison_operator -> GT .)
    ID              reduce using rule 57 (comparison_operator -> GT .)
    ZEROS           reduce using rule 57 (comparison_operator -> GT .)
    ONES            reduce using rule 57 (comparison_operator -> GT .)
    EYE             reduce using rule 57 (comparison_operator -> GT .)
    [               reduce using rule 57 (comparison_operator -> GT .)
    STRING          reduce using rule 57 (comparison_operator -> GT .)


state 91

    (58) comparison_operator -> < .

    -               reduce using rule 58 (comparison_operator -> < .)
    (               reduce using rule 58 (comparison_operator -> < .)
    INTNUM          reduce using rule 58 (comparison_operator -> < .)
    FLOATNUM        reduce using rule 58 (comparison_operator -> < .)
    ID              reduce using rule 58 (comparison_operator -> < .)
    ZEROS           reduce using rule 58 (comparison_operator -> < .)
    ONES            reduce using rule 58 (comparison_operator -> < .)
    EYE             reduce using rule 58 (comparison_operator -> < .)
    [               reduce using rule 58 (comparison_operator -> < .)
    STRING          reduce using rule 58 (comparison_operator -> < .)


state 92

    (59) comparison_operator -> > .

    -               reduce using rule 59 (comparison_operator -> > .)
    (               reduce using rule 59 (comparison_operator -> > .)
    INTNUM          reduce using rule 59 (comparison_operator -> > .)
    FLOATNUM        reduce using rule 59 (comparison_operator -> > .)
    ID              reduce using rule 59 (comparison_operator -> > .)
    ZEROS           reduce using rule 59 (comparison_operator -> > .)
    ONES            reduce using rule 59 (comparison_operator -> > .)
    EYE             reduce using rule 59 (comparison_operator -> > .)
    [               reduce using rule 59 (comparison_operator -> > .)
    STRING          reduce using rule 59 (comparison_operator -> > .)


state 93

    (60) while_instruction -> WHILE ( condition ) . program_ins
    (3) program_ins -> . PRINT value ;
    (4) program_ins -> . assign ;
    (5) program_ins -> . cond_instruction
    (6) program_ins -> . while_instruction
    (7) program_ins -> . for_instruction
    (8) program_ins -> . { program }
    (9) program_ins -> . BREAK ;
    (10) program_ins -> . CONTINUE ;
    (11) program_ins -> . RETURN operation ;
    (12) program_ins -> . COMMENT
    (15) assign -> . id assign_operator operation
    (16) assign -> . id [ index ] assign_operator operation
    (51) cond_instruction -> . IF ( condition ) program_ins
    (52) cond_instruction -> . IF ( condition ) program_ins ELSE program_ins
    (60) while_instruction -> . WHILE ( condition ) program_ins
    (61) for_instruction -> . FOR id = range program_ins
    (47) id -> . ID

    PRINT           shift and go to state 3
    {               shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    COMMENT         shift and go to state 12
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 17

    program_ins                    shift and go to state 102
    assign                         shift and go to state 4
    cond_instruction               shift and go to state 5
    while_instruction              shift and go to state 6
    for_instruction                shift and go to state 7
    id                             shift and go to state 13

state 94

    (61) for_instruction -> FOR id = range . program_ins
    (3) program_ins -> . PRINT value ;
    (4) program_ins -> . assign ;
    (5) program_ins -> . cond_instruction
    (6) program_ins -> . while_instruction
    (7) program_ins -> . for_instruction
    (8) program_ins -> . { program }
    (9) program_ins -> . BREAK ;
    (10) program_ins -> . CONTINUE ;
    (11) program_ins -> . RETURN operation ;
    (12) program_ins -> . COMMENT
    (15) assign -> . id assign_operator operation
    (16) assign -> . id [ index ] assign_operator operation
    (51) cond_instruction -> . IF ( condition ) program_ins
    (52) cond_instruction -> . IF ( condition ) program_ins ELSE program_ins
    (60) while_instruction -> . WHILE ( condition ) program_ins
    (61) for_instruction -> . FOR id = range program_ins
    (47) id -> . ID

    PRINT           shift and go to state 3
    {               shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    COMMENT         shift and go to state 12
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 17

    id                             shift and go to state 13
    program_ins                    shift and go to state 103
    assign                         shift and go to state 4
    cond_instruction               shift and go to state 5
    while_instruction              shift and go to state 6
    for_instruction                shift and go to state 7

state 95

    (62) range -> operation . : operation
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    :               shift and go to state 104
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 96

    (36) operation -> fid ( operation ) .

    ,               reduce using rule 36 (operation -> fid ( operation ) .)
    '               reduce using rule 36 (operation -> fid ( operation ) .)
    +               reduce using rule 36 (operation -> fid ( operation ) .)
    -               reduce using rule 36 (operation -> fid ( operation ) .)
    DOTADD          reduce using rule 36 (operation -> fid ( operation ) .)
    DOTSUB          reduce using rule 36 (operation -> fid ( operation ) .)
    *               reduce using rule 36 (operation -> fid ( operation ) .)
    /               reduce using rule 36 (operation -> fid ( operation ) .)
    DOTMUL          reduce using rule 36 (operation -> fid ( operation ) .)
    DOTDIV          reduce using rule 36 (operation -> fid ( operation ) .)
    ;               reduce using rule 36 (operation -> fid ( operation ) .)
    )               reduce using rule 36 (operation -> fid ( operation ) .)
    ]               reduce using rule 36 (operation -> fid ( operation ) .)
    EQ              reduce using rule 36 (operation -> fid ( operation ) .)
    NEQ             reduce using rule 36 (operation -> fid ( operation ) .)
    LT              reduce using rule 36 (operation -> fid ( operation ) .)
    GT              reduce using rule 36 (operation -> fid ( operation ) .)
    <               reduce using rule 36 (operation -> fid ( operation ) .)
    >               reduce using rule 36 (operation -> fid ( operation ) .)
    :               reduce using rule 36 (operation -> fid ( operation ) .)
    PRINT           reduce using rule 36 (operation -> fid ( operation ) .)
    {               reduce using rule 36 (operation -> fid ( operation ) .)
    BREAK           reduce using rule 36 (operation -> fid ( operation ) .)
    CONTINUE        reduce using rule 36 (operation -> fid ( operation ) .)
    RETURN          reduce using rule 36 (operation -> fid ( operation ) .)
    COMMENT         reduce using rule 36 (operation -> fid ( operation ) .)
    IF              reduce using rule 36 (operation -> fid ( operation ) .)
    WHILE           reduce using rule 36 (operation -> fid ( operation ) .)
    FOR             reduce using rule 36 (operation -> fid ( operation ) .)
    ID              reduce using rule 36 (operation -> fid ( operation ) .)


state 97

    (26) vector_val -> operation , vector_val .

    ]               reduce using rule 26 (vector_val -> operation , vector_val .)


state 98

    (16) assign -> id [ index ] assign_operator . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    id                             shift and go to state 23
    operation                      shift and go to state 105
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 99

    (23) index -> INTNUM , index .

    ]               reduce using rule 23 (index -> INTNUM , index .)


state 100

    (51) cond_instruction -> IF ( condition ) program_ins .
    (52) cond_instruction -> IF ( condition ) program_ins . ELSE program_ins

    PRINT           reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    {               reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    BREAK           reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    CONTINUE        reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    RETURN          reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    COMMENT         reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    IF              reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    WHILE           reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    FOR             reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    ID              reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    $end            reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    }               reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .)
    ELSE            shift and go to state 106

  ! ELSE            [ reduce using rule 51 (cond_instruction -> IF ( condition ) program_ins .) ]


state 101

    (53) condition -> operation comparison_operator operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    )               reduce using rule 53 (condition -> operation comparison_operator operation .)
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 102

    (60) while_instruction -> WHILE ( condition ) program_ins .

    PRINT           reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    {               reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    BREAK           reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    CONTINUE        reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    RETURN          reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    COMMENT         reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    IF              reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    WHILE           reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    FOR             reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    ID              reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    $end            reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    }               reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)
    ELSE            reduce using rule 60 (while_instruction -> WHILE ( condition ) program_ins .)


state 103

    (61) for_instruction -> FOR id = range program_ins .

    PRINT           reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    {               reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    BREAK           reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    CONTINUE        reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    RETURN          reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    COMMENT         reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    IF              reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    WHILE           reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    FOR             reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    ID              reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    $end            reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    }               reduce using rule 61 (for_instruction -> FOR id = range program_ins .)
    ELSE            reduce using rule 61 (for_instruction -> FOR id = range program_ins .)


state 104

    (62) range -> operation : . operation
    (28) operation -> . operation add_operator operation
    (29) operation -> . operation mul_operator operation
    (30) operation -> . - operation
    (31) operation -> . operation '
    (32) operation -> . ( operation )
    (33) operation -> . id
    (34) operation -> . INTNUM
    (35) operation -> . FLOATNUM
    (36) operation -> . fid ( operation )
    (37) operation -> . vector
    (38) operation -> . string
    (47) id -> . ID
    (48) fid -> . ZEROS
    (49) fid -> . ONES
    (50) fid -> . EYE
    (25) vector -> . [ vector_val ]
    (17) string -> . STRING

    -               shift and go to state 21
    (               shift and go to state 22
    INTNUM          shift and go to state 24
    FLOATNUM        shift and go to state 25
    ID              shift and go to state 17
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    EYE             shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33

    operation                      shift and go to state 107
    id                             shift and go to state 23
    fid                            shift and go to state 26
    vector                         shift and go to state 27
    string                         shift and go to state 28

state 105

    (16) assign -> id [ index ] assign_operator operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    ;               reduce using rule 16 (assign -> id [ index ] assign_operator operation .)
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 106

    (52) cond_instruction -> IF ( condition ) program_ins ELSE . program_ins
    (3) program_ins -> . PRINT value ;
    (4) program_ins -> . assign ;
    (5) program_ins -> . cond_instruction
    (6) program_ins -> . while_instruction
    (7) program_ins -> . for_instruction
    (8) program_ins -> . { program }
    (9) program_ins -> . BREAK ;
    (10) program_ins -> . CONTINUE ;
    (11) program_ins -> . RETURN operation ;
    (12) program_ins -> . COMMENT
    (15) assign -> . id assign_operator operation
    (16) assign -> . id [ index ] assign_operator operation
    (51) cond_instruction -> . IF ( condition ) program_ins
    (52) cond_instruction -> . IF ( condition ) program_ins ELSE program_ins
    (60) while_instruction -> . WHILE ( condition ) program_ins
    (61) for_instruction -> . FOR id = range program_ins
    (47) id -> . ID

    PRINT           shift and go to state 3
    {               shift and go to state 8
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    COMMENT         shift and go to state 12
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 17

    program_ins                    shift and go to state 108
    assign                         shift and go to state 4
    cond_instruction               shift and go to state 5
    while_instruction              shift and go to state 6
    for_instruction                shift and go to state 7
    id                             shift and go to state 13

state 107

    (62) range -> operation : operation .
    (28) operation -> operation . add_operator operation
    (29) operation -> operation . mul_operator operation
    (31) operation -> operation . '
    (43) add_operator -> . +
    (44) add_operator -> . -
    (45) add_operator -> . DOTADD
    (46) add_operator -> . DOTSUB
    (39) mul_operator -> . *
    (40) mul_operator -> . /
    (41) mul_operator -> . DOTMUL
    (42) mul_operator -> . DOTDIV

    PRINT           reduce using rule 62 (range -> operation : operation .)
    {               reduce using rule 62 (range -> operation : operation .)
    BREAK           reduce using rule 62 (range -> operation : operation .)
    CONTINUE        reduce using rule 62 (range -> operation : operation .)
    RETURN          reduce using rule 62 (range -> operation : operation .)
    COMMENT         reduce using rule 62 (range -> operation : operation .)
    IF              reduce using rule 62 (range -> operation : operation .)
    WHILE           reduce using rule 62 (range -> operation : operation .)
    FOR             reduce using rule 62 (range -> operation : operation .)
    ID              reduce using rule 62 (range -> operation : operation .)
    '               shift and go to state 53
    +               shift and go to state 54
    -               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTMUL          shift and go to state 60
    DOTDIV          shift and go to state 61

    add_operator                   shift and go to state 51
    mul_operator                   shift and go to state 52

state 108

    (52) cond_instruction -> IF ( condition ) program_ins ELSE program_ins .

    PRINT           reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    {               reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    BREAK           reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    CONTINUE        reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    RETURN          reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    COMMENT         reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    IF              reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    WHILE           reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    FOR             reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    ID              reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    $end            reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    }               reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)
    ELSE            reduce using rule 52 (cond_instruction -> IF ( condition ) program_ins ELSE program_ins .)

